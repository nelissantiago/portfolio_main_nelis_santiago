generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  

  accounts      Account[]
  sessions      Session[]
  pool Pool[]
  discord Discord[] 

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
model SlugCreate {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  slug        String @unique
  embedId String
  tags TagsLogs[]
  
  @@map("newaccounts")
}

model Tag {
  id         String          @id @default(auto()) @map("_id") @db.ObjectId
  name       String          @unique
  slug       String          @unique
  newaccounts TagsLogs[]

  @@map("tags")
}

model TagsLogs {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  NewAccount   SlugCreate @relation(fields: [challengeId], references: [id])
  challengeId String    @db.ObjectId
  tag         Tag       @relation(fields: [tagId], references: [id])
  tagId       String    @db.ObjectId

  @@map("challengeTags")
}
model Pool {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  avatar      String 
  title      String
  nota      Int 
  description String
  createdAt DateTime @default(now())
  userpoolId String @unique

  userpool User @relation(fields: [userpoolId], references: [id])

  @@map("pool")
}

model Discord {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  avatar String
  discord String
  mensagem String

  userpool User @relation(fields: [userpoolId], references: [id]) 
  userpoolId String @unique

  @@map("discord")
 }